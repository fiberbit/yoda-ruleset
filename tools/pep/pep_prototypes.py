# -*- coding: utf-8 -*-
from util import policy

# Use below prototypes as a basis for PEP rule implementations in policies.py
# These are automatically generated from https://github.com/irods/irods_docs/blob/4-2-stable/dynamic_peps.json

@policy.make_pep()
def pep_auth_client_start_pre(ctx, instance_name, _ctx, out, _comm, _4): return policy.succeed()
@policy.make_pep()
def pep_auth_establish_context_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_auth_client_request_pre(ctx, instance_name, _ctx, out, _comm): return policy.succeed()
@policy.make_pep()
def pep_auth_agent_request_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_auth_client_response_pre(ctx, instance_name, _ctx, out, _comm): return policy.succeed()
@policy.make_pep()
def pep_auth_agent_response_pre(ctx, instance_name, _ctx, out, _resp): return policy.succeed()
@policy.make_pep()
def pep_auth_agent_verify_pre(ctx, instance_name, _1, out, _3, _4, _5): return policy.succeed()
@policy.make_pep()
def pep_auth_agent_start_pre(ctx, instance_name, _1, out, _3): return policy.succeed()
@policy.make_pep()
def pep_resource_copy_pre(ctx, instance_name, mode, out, src_file_name, dest_file_name): return policy.succeed()
@policy.make_pep()
def pep_resource_mkdir_r_pre(ctx, instance_name, path, out, mode): return policy.succeed()
@policy.make_pep()
def pep_resource_registered_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_unregistered_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_modified_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_notify_pre(ctx, instance_name, _ctx, out, _3): return policy.succeed()
@policy.make_pep()
def pep_resource_getfs_freespace_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_create_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_open_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_read_pre(ctx, instance_name, _ctx, out, _buf, _len): return policy.succeed()
@policy.make_pep()
def pep_resource_write_pre(ctx, instance_name, _ctx, out, _buf, _len): return policy.succeed()
@policy.make_pep()
def pep_resource_close_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_unlink_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_stat_pre(ctx, instance_name, _ctx, out, _statbuf): return policy.succeed()
@policy.make_pep()
def pep_resource_lseek_pre(ctx, instance_name, _ctx, out, _offset, _whence): return policy.succeed()
@policy.make_pep()
def pep_resource_mkdir_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_rmdir_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_opendir_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_closedir_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_readdir_pre(ctx, instance_name, _ctx, out, _dirent_ptr): return policy.succeed()
@policy.make_pep()
def pep_resource_rename_pre(ctx, instance_name, _ctx, out, _new_file_name): return policy.succeed()
@policy.make_pep()
def pep_resource_truncate_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_resource_stage_to_cache_pre(ctx, instance_name, _ctx, out, _cache_file_name): return policy.succeed()
@policy.make_pep()
def pep_resource_sync_to_arch_pre(ctx, instance_name, _ctx, out, _cache_file_name): return policy.succeed()
@policy.make_pep()
def pep_resource_resolve_hierarchy_pre(ctx, instance_name, _ctx, out, _opr, _curr_host, _out_parser, _out_vote): return policy.succeed()
@policy.make_pep()
def pep_resource_rebalance_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_database_start_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_database_debug_pre(ctx, instance_name, _ctx, out, _mode): return policy.succeed()
@policy.make_pep()
def pep_database_open_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_database_close_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_database_check_and_get_object_id_pre(ctx, instance_name, _ctx, out, _type, _name, _access): return policy.succeed()
@policy.make_pep()
def pep_database_get_local_zone_pre(ctx, instance_name, _ctx, out, _zone): return policy.succeed()
@policy.make_pep()
def pep_database_update_resc_obj_count_pre(ctx, instance_name, _ctx, out, _resc, _delta): return policy.succeed()
@policy.make_pep()
def pep_database_mod_data_obj_meta_pre(ctx, instance_name, _ctx, out, _data_obj_info, _reg_param): return policy.succeed()
@policy.make_pep()
def pep_database_reg_data_obj_pre(ctx, instance_name, _ctx, out, _data_obj_info): return policy.succeed()
@policy.make_pep()
def pep_database_reg_replica_pre(ctx, instance_name, _ctx, out, _src_data_obj_info, _dst_data_obj_info, _cond_input): return policy.succeed()
@policy.make_pep()
def pep_database_unreg_replica_pre(ctx, instance_name, _ctx, out, _data_obj_info, _cond_input): return policy.succeed()
@policy.make_pep()
def pep_database_reg_rule_exec_pre(ctx, instance_name, _ctx, out, _re_sub_inp): return policy.succeed()
@policy.make_pep()
def pep_database_mod_rule_exec_pre(ctx, instance_name, _ctx, out, _re_id, _reg_param): return policy.succeed()
@policy.make_pep()
def pep_database_del_rule_exec_pre(ctx, instance_name, _ctx, out, _re_id): return policy.succeed()
@policy.make_pep()
def pep_database_add_child_resc_pre(ctx, instance_name, _ctx, out, _resc_input): return policy.succeed()
@policy.make_pep()
def pep_database_reg_resc_pre(ctx, instance_name, _ctx, out, _resc_input): return policy.succeed()
@policy.make_pep()
def pep_database_del_child_resc_pre(ctx, instance_name, _ctx, out, _resc_input): return policy.succeed()
@policy.make_pep()
def pep_database_del_resc_pre(ctx, instance_name, _ctx, out, _resc_name, _dry_run): return policy.succeed()
@policy.make_pep()
def pep_database_rollback_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_database_commit_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_database_del_user_re_pre(ctx, instance_name, _ctx, out, _user_info): return policy.succeed()
@policy.make_pep()
def pep_database_reg_coll_by_admin_pre(ctx, instance_name, _ctx, out, _coll_info): return policy.succeed()
@policy.make_pep()
def pep_database_reg_coll_pre(ctx, instance_name, _ctx, out, _coll_info): return policy.succeed()
@policy.make_pep()
def pep_database_mod_coll_pre(ctx, instance_name, _ctx, out, _coll_info): return policy.succeed()
@policy.make_pep()
def pep_database_reg_zone_pre(ctx, instance_name, _ctx, out, _zone_name, _zone_type, _zone_conn_info, _zone_comment): return policy.succeed()
@policy.make_pep()
def pep_database_mod_zone_pre(ctx, instance_name, _ctx, out, _zone_name, _option, _option_value): return policy.succeed()
@policy.make_pep()
def pep_database_rename_coll_pre(ctx, instance_name, _ctx, out, _old_coll, _new_coll): return policy.succeed()
@policy.make_pep()
def pep_database_mod_zone_coll_acl_pre(ctx, instance_name, _ctx, out, _access_level, _user_name, _path_name): return policy.succeed()
@policy.make_pep()
def pep_database_rename_local_zone_pre(ctx, instance_name, _ctx, out, _old_zone, _new_zone): return policy.succeed()
@policy.make_pep()
def pep_database_del_zone_pre(ctx, instance_name, _ctx, out, _zone_name): return policy.succeed()
@policy.make_pep()
def pep_database_simple_query_pre(ctx, instance_name, _ctx, out, _sql, _arg1, _arg2, _arg3, _arg4, _format, _control, _out_buf, _max_out_buf): return policy.succeed()
@policy.make_pep()
def pep_database_del_coll_by_admin_pre(ctx, instance_name, _ctx, out, _coll_info): return policy.succeed()
@policy.make_pep()
def pep_database_del_coll_pre(ctx, instance_name, _ctx, out, _coll_info): return policy.succeed()
@policy.make_pep()
def pep_database_check_auth_pre(ctx, instance_name, _ctx, out, _scheme, _challenge, _response, _user_name, _user_priv_level, _client_priv_level): return policy.succeed()
@policy.make_pep()
def pep_database_make_temp_pw_pre(ctx, instance_name, _ctx, out, _pw_value_to_hash, _other_user): return policy.succeed()
@policy.make_pep()
def pep_database_make_limited_pw_pre(ctx, instance_name, _ctx, out, _ttl, _pw_value_to_hash): return policy.succeed()
@policy.make_pep()
def pep_database_update_pam_password_pre(ctx, instance_name, _ctx, out, _user_name, _ttl, _test_time, _irods_password): return policy.succeed()
@policy.make_pep()
def pep_database_mod_user_pre(ctx, instance_name, _ctx, out, _user_name, _option, _new_value): return policy.succeed()
@policy.make_pep()
def pep_database_mod_group_pre(ctx, instance_name, _ctx, out, _group_name, _option, _user_name, _user_zone): return policy.succeed()
@policy.make_pep()
def pep_database_mod_resc_pre(ctx, instance_name, _ctx, out, _resc_name, _option, _option_value): return policy.succeed()
@policy.make_pep()
def pep_database_mod_resc_data_paths_pre(ctx, instance_name, _ctx, out, _resc_name, _old_path, _new_path, _user_name): return policy.succeed()
@policy.make_pep()
def pep_database_mod_resc_freespace_pre(ctx, instance_name, _ctx, out, _resc_name, _update_value): return policy.succeed()
@policy.make_pep()
def pep_database_reg_user_re_pre(ctx, instance_name, _ctx, out, _user_info): return policy.succeed()
@policy.make_pep()
def pep_database_set_avu_metadata_pre(ctx, instance_name, _ctx, out, _type, _name, _attribute, _new_value, _new_unit): return policy.succeed()
@policy.make_pep()
def pep_database_add_avu_metadata_wild_pre(ctx, instance_name, _ctx, out, _admin_mode, _type, _name, _attribute, _value, _units): return policy.succeed()
@policy.make_pep()
def pep_database_add_avu_metadata_pre(ctx, instance_name, _ctx, out, _admin_mode, _type, _name, _attribute, _value, _units): return policy.succeed()
@policy.make_pep()
def pep_database_mod_avu_metadata_pre(ctx, instance_name, _ctx, out, _type, _name, _attribute, _value, _units_or_arg0, _arg1, _arg2, _arg3): return policy.succeed()
@policy.make_pep()
def pep_database_del_avu_metadata_pre(ctx, instance_name, _ctx, out, _option, _type, _name, _attribute, _value, _unit, _nocommit): return policy.succeed()
@policy.make_pep()
def pep_database_copy_avu_metadata_pre(ctx, instance_name, _ctx, out, _type1, _type2, _name1, _name2): return policy.succeed()
@policy.make_pep()
def pep_database_mod_access_control_resc_pre(ctx, instance_name, _ctx, out, _recursive_flag, _access_level, _user_name, _zone, _resc_name): return policy.succeed()
@policy.make_pep()
def pep_database_mod_access_control_pre(ctx, instance_name, _ctx, out, _recursive_flag, _access_level, _user_name, _zone, _path_name): return policy.succeed()
@policy.make_pep()
def pep_database_rename_object_pre(ctx, instance_name, _ctx, out, _obj_id, _new_name): return policy.succeed()
@policy.make_pep()
def pep_database_move_object_pre(ctx, instance_name, _ctx, out, _obj_id, _target_coll_id): return policy.succeed()
@policy.make_pep()
def pep_database_reg_token_pre(ctx, instance_name, _ctx, out, _name_space, _name, _value, _value2, _value3, _comment): return policy.succeed()
@policy.make_pep()
def pep_database_del_token_pre(ctx, instance_name, _ctx, out, _name_space, _name): return policy.succeed()
@policy.make_pep()
def pep_database_reg_server_load_pre(ctx, instance_name, _ctx, out, _host_name, _resc_name, _cpu_used, _mem_used, _swap_used, _run_q_load, _disk_space, _net_input, _net_output): return policy.succeed()
@policy.make_pep()
def pep_database_purge_server_load_pre(ctx, instance_name, _ctx, out, _seconds_ago): return policy.succeed()
@policy.make_pep()
def pep_database_reg_server_load_digest_pre(ctx, instance_name, _ctx, out, _resc_name, _load_factor): return policy.succeed()
@policy.make_pep()
def pep_database_purge_server_load_digest_pre(ctx, instance_name, _ctx, out, _seconds_ago): return policy.succeed()
@policy.make_pep()
def pep_database_calc_usage_and_quota_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_database_set_quota_pre(ctx, instance_name, _ctx, out, _type, _name, _resc_name, _limit): return policy.succeed()
@policy.make_pep()
def pep_database_check_quota_pre(ctx, instance_name, _ctx, out, _user_name, _resc_name, _user_quota, _quota_status): return policy.succeed()
@policy.make_pep()
def pep_database_del_unused_avus_pre(ctx, instance_name, _ctx, out): return policy.succeed()
@policy.make_pep()
def pep_database_ins_rule_table_pre(ctx, instance_name, _ctx, out, _base_name, _map_priority_str, _rule_name, _rule_head, _rule_condition, _rule_action, _rule_recovery, _rule_id_str, _my_time): return policy.succeed()
@policy.make_pep()
def pep_database_ins_dvm_table_pre(ctx, instance_name, _ctx, out, _base_name, _var_name, _action, _var_2_cmap, _my_time): return policy.succeed()
@policy.make_pep()
def pep_database_ins_fnm_table_pre(ctx, instance_name, _ctx, out, _base_name, _func_name, _func_2_cmap, _my_time): return policy.succeed()
@policy.make_pep()
def pep_database_ins_msrvc_table_pre(ctx, instance_name, _ctx, out, _module_name, _msrvc_name, _msrvc_signature, _msrvc_version, _msrvc_host, _msrvc_location, _msrvc_language, _msrvc_type_name, _msrvc_status, _my_time): return policy.succeed()
@policy.make_pep()
def pep_database_version_rule_base_pre(ctx, instance_name, _ctx, out, _base_name, _my_time): return policy.succeed()
@policy.make_pep()
def pep_database_version_dvm_base_pre(ctx, instance_name, _ctx, out, _base_name, _my_time): return policy.succeed()
@policy.make_pep()
def pep_database_version_fnm_base_pre(ctx, instance_name, _ctx, out, _base_name, _my_time): return policy.succeed()
@policy.make_pep()
def pep_database_add_specific_query_pre(ctx, instance_name, _ctx, out, _sql, _alias): return policy.succeed()
@policy.make_pep()
def pep_database_del_specific_query_pre(ctx, instance_name, _ctx, out, _sql_or_alias): return policy.succeed()
@policy.make_pep()
def pep_database_specific_query_pre(ctx, instance_name, _ctx, out, _spec_query_inp, _result): return policy.succeed()
@policy.make_pep()
def pep_database_substitute_resource_hierarchies_pre(ctx, instance_name, _ctx, out, _old_hier, _new_hier): return policy.succeed()
@policy.make_pep()
def pep_database_get_distinct_data_obj_count_on_resource_pre(ctx, instance_name, _ctx, out, _resc_name, _count): return policy.succeed()
@policy.make_pep()
def pep_database_get_distinct_data_objs_missing_from_child_given_parent_pre(ctx, instance_name, _ctx, out, _parent, _child, _limit, _results): return policy.succeed()
@policy.make_pep()
def pep_database_get_repl_list_for_leaf_bundles_pre(ctx, instance_name, _ctx, out, _count, _child_index, _bundles, _results): return policy.succeed()
@policy.make_pep()
def pep_database_get_hierarchy_for_resc_pre(ctx, instance_name, _ctx, out, _resc_name, _zone_name, _hierarchy): return policy.succeed()
@policy.make_pep()
def pep_database_mod_ticket_pre(ctx, instance_name, _ctx, out, _op_name, _ticket_string, _arg3, _arg4, _arg5): return policy.succeed()
@policy.make_pep()
def pep_database_get_icss_pre(ctx, instance_name, _ctx, out, _icss): return policy.succeed()
@policy.make_pep()
def pep_database_gen_query_pre(ctx, instance_name, _ctx, out, _gen_query_inp, _result): return policy.succeed()
@policy.make_pep()
def pep_database_gen_query_access_control_setup_pre(ctx, instance_name, _ctx, out, _user, _zone, _host, _priv, _control_flag): return policy.succeed()
@policy.make_pep()
def pep_database_gen_query_ticket_setup_pre(ctx, instance_name, _ctx, out, _ticket, _client_addr): return policy.succeed()
@policy.make_pep()
def pep_database_general_update_pre(ctx, instance_name, _ctx, out, _update_inp): return policy.succeed()
@policy.make_pep()
def pep_database_start_operation_pre(ctx, instance_name, _props, out): return policy.succeed()
@policy.make_pep()
def pep_network_socket_read_pre(ctx, instance_name, _socket, out, _buffer, _length, _bytes_read, _time_value): return policy.succeed()
@policy.make_pep()
def pep_network_socket_write_pre(ctx, instance_name, _socket, out, _buffer, _length, _bytes_written): return policy.succeed()
@policy.make_pep()
def pep_network_start_pre(ctx, instance_name, _1, out): return policy.succeed()
@policy.make_pep()
def pep_network_end_pre(ctx, instance_name, _1, out): return policy.succeed()
@policy.make_pep()
def pep_network_shutdown_pre(ctx, instance_name, _1, out): return policy.succeed()
@policy.make_pep()
def pep_network_read_msg_header_pre(ctx, instance_name, _ctx, out, _buffer, _time_val): return policy.succeed()
@policy.make_pep()
def pep_network_write_msg_header_pre(ctx, instance_name, _ctx, out, _header): return policy.succeed()
@policy.make_pep()
def pep_network_send_rods_msg_pre(ctx, instance_name, _ctx, out, _msg_type, _msg_buf, _stream_bbuf, _error_buf, _int_info, _protocol): return policy.succeed()
@policy.make_pep()
def pep_network_read_msg_body_pre(ctx, instance_name, _ctx, out, _header, _input_struct_buf, _bs_buf, _error_buf, _protocol, _time_val): return policy.succeed()
@policy.make_pep()
def pep_network_client_stop_pre(ctx, instance_name, _1, out, _3): return policy.succeed()
@policy.make_pep()
def pep_network_client_start_pre(ctx, instance_name, _ctx, out, _env): return policy.succeed()
@policy.make_pep()
def pep_network_agent_stop_pre(ctx, instance_name, _1, out): return policy.succeed()
@policy.make_pep()
def pep_network_agent_start_pre(ctx, instance_name, _1, out): return policy.succeed()
@policy.make_pep()
def pep_api_atomic_apply_acl_operations_pre(ctx, instance_name, rs_comm, json_input, json_output): return policy.succeed()
@policy.make_pep()
def pep_api_atomic_apply_metadata_operations_pre(ctx, instance_name, rs_comm, json_input, json_output): return policy.succeed()
@policy.make_pep()
def pep_api_auth_check_pre(ctx, instance_name, rs_comm, auth_check_inp, auth_check_out): return policy.succeed()
@policy.make_pep()
def pep_api_auth_plugin_request_pre(ctx, instance_name, _comm, _req_inp, _req_out): return policy.succeed()
@policy.make_pep()
def pep_api_auth_request_pre(ctx, instance_name, _comm, _req): return policy.succeed()
@policy.make_pep()
def pep_api_auth_response_pre(ctx, instance_name, _comm, _resp): return policy.succeed()
@policy.make_pep()
def pep_api_bulk_data_obj_put_pre(ctx, instance_name, rs_comm, bulk_opr_inp, bulk_opr_inp_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_bulk_data_obj_reg_pre(ctx, instance_name, rs_comm, bulk_data_obj_reg_inp, bulk_data_obj_reg_out): return policy.succeed()
@policy.make_pep()
def pep_api_chk_obj_perm_and_stat_pre(ctx, instance_name, rs_comm, chk_obj_perm_and_stat_inp): return policy.succeed()
@policy.make_pep()
def pep_api_client_hints_pre(ctx, instance_name, _comm, _bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_coll_create_pre(ctx, instance_name, rs_comm, coll_create_inp): return policy.succeed()
@policy.make_pep()
def pep_api_coll_repl_pre(ctx, instance_name, rs_comm, coll_repl_inp, coll_opr_stat): return policy.succeed()
@policy.make_pep()
def pep_api_data_copy_pre(ctx, instance_name, rs_comm, data_copy_inp): return policy.succeed()
@policy.make_pep()
def pep_api_data_get_pre(ctx, instance_name, rs_comm, data_opr_inp, portal_opr_out): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_chksum_pre(ctx, instance_name, rs_comm, data_obj_chksum_inp, out_chksum): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_close_pre(ctx, instance_name, rs_comm, data_obj_close_inp): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_copy_pre(ctx, instance_name, rs_comm, data_obj_copy_inp, trans_stat): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_create_pre(ctx, instance_name, rs_comm, data_obj_inp): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_create_and_stat_pre(ctx, instance_name, rs_comm, data_obj_inp, open_stat): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_get_pre(ctx, instance_name, rs_comm, data_obj_inp, portal_opr_out, data_obj_out_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_lock_pre(ctx, instance_name, rs_comm, data_obj_inp): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_lseek_pre(ctx, instance_name, rs_comm, data_obj_lseek_inp, data_obj_lseek_out): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_open_pre(ctx, instance_name, rs_comm, data_obj_inp): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_open_and_stat_pre(ctx, instance_name, rs_comm, data_obj_inp, open_stat): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_phymv_pre(ctx, instance_name, rs_comm, data_obj_inp, trans_stat): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_put_pre(ctx, instance_name, rs_comm, data_obj_inp, data_obj_inp_bbuf, portal_opr_out): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_read_pre(ctx, instance_name, rs_comm, data_obj_read_inp, data_obj_read_out_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_rename_pre(ctx, instance_name, rs_comm, data_obj_rename_inp): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_repl_pre(ctx, instance_name, rs_comm, data_obj_inp, trans_stat): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_rsync_pre(ctx, instance_name, rs_comm, data_obj_inp, out_param_array): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_trim_pre(ctx, instance_name, rs_comm, data_obj_inp): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_truncate_pre(ctx, instance_name, rs_comm, data_obj_truncate_inp): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_unlink_pre(ctx, instance_name, rs_comm, data_obj_unlink_inp): return policy.succeed()
@policy.make_pep()
def pep_api_data_obj_write_pre(ctx, instance_name, rs_comm, data_obj_write_inp, data_obj_write_inp_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_data_object_finalize_pre(ctx, instance_name, rs_comm, json_input, json_output): return policy.succeed()
@policy.make_pep()
def pep_api_data_object_modify_info_pre(ctx, instance_name, rs_comm, mod_data_obj_meta_inp): return policy.succeed()
@policy.make_pep()
def pep_api_data_put_pre(ctx, instance_name, rs_comm, data_opr_inp, portal_opr_out): return policy.succeed()
@policy.make_pep()
def pep_api_end_transaction_pre(ctx, instance_name, rs_comm, end_transaction_inp): return policy.succeed()
@policy.make_pep()
def pep_api_exec_cmd_pre(ctx, instance_name, rs_comm, exec_cmd_inp, exec_cmd_out): return policy.succeed()
@policy.make_pep()
def pep_api_exec_my_rule_pre(ctx, instance_name, _comm, _exec_inp, _out_arr): return policy.succeed()
@policy.make_pep()
def pep_api_exec_rule_expression_pre(ctx, instance_name, _comm, _exec_rule): return policy.succeed()
@policy.make_pep()
def pep_api_file_chksum_pre(ctx, instance_name, rs_comm, file_chksum_inp, chksum_str): return policy.succeed()
@policy.make_pep()
def pep_api_file_chmod_pre(ctx, instance_name, rs_comm, file_chmod_inp): return policy.succeed()
@policy.make_pep()
def pep_api_file_close_pre(ctx, instance_name, rs_comm, file_close_inp): return policy.succeed()
@policy.make_pep()
def pep_api_file_closedir_pre(ctx, instance_name, rs_comm, file_closedir_inp): return policy.succeed()
@policy.make_pep()
def pep_api_file_create_pre(ctx, instance_name, rs_comm, file_create_inp, _out): return policy.succeed()
@policy.make_pep()
def pep_api_file_get_pre(ctx, instance_name, rs_comm, file_get_inp, file_get_out_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_file_get_fs_free_space_pre(ctx, instance_name, rs_comm, file_get_fs_free_space_inp, file_get_fs_free_space_out): return policy.succeed()
@policy.make_pep()
def pep_api_file_lseek_pre(ctx, instance_name, rs_comm, file_lseek_inp, file_lseek_out): return policy.succeed()
@policy.make_pep()
def pep_api_file_mkdir_pre(ctx, instance_name, rs_comm, file_mkdir_inp): return policy.succeed()
@policy.make_pep()
def pep_api_file_open_pre(ctx, instance_name, rs_comm, file_open_inp): return policy.succeed()
@policy.make_pep()
def pep_api_file_opendir_pre(ctx, instance_name, rs_comm, file_opendir_inp): return policy.succeed()
@policy.make_pep()
def pep_api_file_put_pre(ctx, instance_name, rs_comm, file_put_inp, file_put_inp_bbuf, _put_out): return policy.succeed()
@policy.make_pep()
def pep_api_file_read_pre(ctx, instance_name, rs_comm, file_read_inp, file_read_out_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_file_readdir_pre(ctx, instance_name, rs_comm, file_readdir_inp, file_readdir_out): return policy.succeed()
@policy.make_pep()
def pep_api_file_rename_pre(ctx, instance_name, rs_comm, file_rename_inp, rename_out): return policy.succeed()
@policy.make_pep()
def pep_api_file_rmdir_pre(ctx, instance_name, rs_comm, file_rmdir_inp): return policy.succeed()
@policy.make_pep()
def pep_api_file_stage_to_cache_pre(ctx, instance_name, rs_comm, file_stage_to_cache_inp): return policy.succeed()
@policy.make_pep()
def pep_api_file_stat_pre(ctx, instance_name, rs_comm, file_stat_inp, file_stat_out): return policy.succeed()
@policy.make_pep()
def pep_api_file_sync_to_arch_pre(ctx, instance_name, rs_comm, file_sync_to_arch_inp, sync_out): return policy.succeed()
@policy.make_pep()
def pep_api_file_truncate_pre(ctx, instance_name, rs_comm, file_truncate_inp): return policy.succeed()
@policy.make_pep()
def pep_api_file_unlink_pre(ctx, instance_name, rs_comm, file_unlink_inp): return policy.succeed()
@policy.make_pep()
def pep_api_file_write_pre(ctx, instance_name, rs_comm, file_write_inp, file_write_inp_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_gen_query_pre(ctx, instance_name, rs_comm, gen_query_inp, gen_query_out): return policy.succeed()
@policy.make_pep()
def pep_api_general_admin_pre(ctx, instance_name, rs_comm, general_admin_inp): return policy.succeed()
@policy.make_pep()
def pep_api_general_row_insert_pre(ctx, instance_name, rs_comm, general_row_insert_inp): return policy.succeed()
@policy.make_pep()
def pep_api_general_row_purge_pre(ctx, instance_name, rs_comm, general_row_purge_inp): return policy.succeed()
@policy.make_pep()
def pep_api_general_update_pre(ctx, instance_name, rs_comm, general_update_inp): return policy.succeed()
@policy.make_pep()
def pep_api_get_file_descriptor_info_pre(ctx, instance_name, rs_comm, json_input, json_output): return policy.succeed()
@policy.make_pep()
def pep_api_get_hier_from_leaf_id_pre(ctx, instance_name, _comm, _inp, _out): return policy.succeed()
@policy.make_pep()
def pep_api_get_hierarchy_for_resc_pre(ctx, instance_name, _comm, _inp, _out): return policy.succeed()
@policy.make_pep()
def pep_api_get_host_for_get_pre(ctx, instance_name, rs_comm, data_obj_inp, out_host): return policy.succeed()
@policy.make_pep()
def pep_api_get_host_for_put_pre(ctx, instance_name, rs_comm, data_obj_inp, out_host): return policy.succeed()
@policy.make_pep()
def pep_api_get_limited_password_pre(ctx, instance_name, rs_comm, get_limited_password_inp, get_limited_password_out): return policy.succeed()
@policy.make_pep()
def pep_api_get_misc_svr_info_pre(ctx, instance_name, rs_comm, out_svr_info): return policy.succeed()
@policy.make_pep()
def pep_api_get_remote_zone_resc_pre(ctx, instance_name, rs_comm, data_obj_inp, resc_addr): return policy.succeed()
@policy.make_pep()
def pep_api_get_resc_quota_pre(ctx, instance_name, rs_comm, get_resc_quota_inp, resc_quota): return policy.succeed()
@policy.make_pep()
def pep_api_get_temp_password_pre(ctx, instance_name, rs_comm, get_temp_password_out): return policy.succeed()
@policy.make_pep()
def pep_api_get_temp_password_for_other_pre(ctx, instance_name, rs_comm, get_temp_password_for_other_inp, get_temp_password_for_other_out): return policy.succeed()
@policy.make_pep()
def pep_api_get_xmsg_ticket_pre(ctx, instance_name, _1, get_xmsg_ticket_inp, out_xmsg_ticket_info): return policy.succeed()
@policy.make_pep()
def pep_api_ies_client_hints_pre(ctx, instance_name, _comm, _bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_l3_file_get_single_buf_pre(ctx, instance_name, rs_comm, l1desc_inx, data_obj_out_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_l3_file_put_single_buf_pre(ctx, instance_name, rs_comm, l1desc_inx, data_obj_in_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_mod_avu_metadata_pre(ctx, instance_name, rs_comm, mod_avumetadata_inp): return policy.succeed()
@policy.make_pep()
def pep_api_mod_access_control_pre(ctx, instance_name, rs_comm, mod_access_control_inp): return policy.succeed()
@policy.make_pep()
def pep_api_mod_coll_pre(ctx, instance_name, rs_comm, mod_coll_inp): return policy.succeed()
@policy.make_pep()
def pep_api_mod_data_obj_meta_pre(ctx, instance_name, rs_comm, mod_data_obj_meta_inp): return policy.succeed()
@policy.make_pep()
def pep_api_obj_stat_pre(ctx, instance_name, rs_comm, data_obj_inp, rods_obj_stat_out): return policy.succeed()
@policy.make_pep()
def pep_api_open_collection_pre(ctx, instance_name, rs_comm, open_coll_inp): return policy.succeed()
@policy.make_pep()
def pep_api_opr_complete_pre(ctx, instance_name, rs_comm, retval): return policy.succeed()
@policy.make_pep()
def pep_api_pam_auth_request_pre(ctx, instance_name, rs_comm, pam_auth_request_inp, pam_auth_request_out): return policy.succeed()
@policy.make_pep()
def pep_api_phy_bundle_coll_pre(ctx, instance_name, rs_comm, phy_bundle_coll_inp): return policy.succeed()
@policy.make_pep()
def pep_api_phy_path_reg_pre(ctx, instance_name, rs_comm, phy_path_reg_inp): return policy.succeed()
@policy.make_pep()
def pep_api_proc_stat_pre(ctx, instance_name, rs_comm, proc_stat_inp, proc_stat_out): return policy.succeed()
@policy.make_pep()
def pep_api_query_spec_coll_pre(ctx, instance_name, rs_comm, data_obj_inp, gen_query_out): return policy.succeed()
@policy.make_pep()
def pep_api_replica_close_pre(ctx, instance_name, _1, json_input): return policy.succeed()
@policy.make_pep()
def pep_api_replica_open_pre(ctx, instance_name, _1, data_obj_inp, json_output): return policy.succeed()
@policy.make_pep()
def pep_api_rcv_xmsg_pre(ctx, instance_name, _1, rcv_xmsg_inp, rcv_xmsg_out): return policy.succeed()
@policy.make_pep()
def pep_api_read_collection_pre(ctx, instance_name, _1, handle_inx_inp, coll_ent): return policy.succeed()
@policy.make_pep()
def pep_api_reg_coll_pre(ctx, instance_name, rs_comm, reg_coll_inp): return policy.succeed()
@policy.make_pep()
def pep_api_reg_data_obj_pre(ctx, instance_name, rs_comm, data_obj_info, out_data_obj_info): return policy.succeed()
@policy.make_pep()
def pep_api_reg_replica_pre(ctx, instance_name, rs_comm, reg_replica_inp): return policy.succeed()
@policy.make_pep()
def pep_api_rm_coll_pre(ctx, instance_name, rs_comm, rm_coll_inp, coll_opr_stat): return policy.succeed()
@policy.make_pep()
def pep_api_rule_exec_del_pre(ctx, instance_name, rs_comm, rule_exec_del_inp): return policy.succeed()
@policy.make_pep()
def pep_api_rule_exec_mod_pre(ctx, instance_name, rs_comm, rule_exec_mod_inp): return policy.succeed()
@policy.make_pep()
def pep_api_rule_exec_submit_pre(ctx, instance_name, rs_comm, rule_exec_submit_inp, rule_exec_id): return policy.succeed()
@policy.make_pep()
def pep_api_send_xmsg_pre(ctx, instance_name, rs_comm, send_xmsg_inp): return policy.succeed()
@policy.make_pep()
def pep_api_server_report_pre(ctx, instance_name, _comm, _bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_set_round_robin_context_pre(ctx, instance_name, _comm, _inp): return policy.succeed()
@policy.make_pep()
def pep_api_simple_query_pre(ctx, instance_name, rs_comm, simple_query_inp, simple_query_out): return policy.succeed()
@policy.make_pep()
def pep_api_specific_query_pre(ctx, instance_name, rs_comm, specific_query_inp, gen_query_out): return policy.succeed()
@policy.make_pep()
def pep_api_ssl_end_pre(ctx, instance_name, rs_comm, _2): return policy.succeed()
@policy.make_pep()
def pep_api_ssl_start_pre(ctx, instance_name, rs_comm, _2): return policy.succeed()
@policy.make_pep()
def pep_api_stream_close_pre(ctx, instance_name, rs_comm, stream_close_inp): return policy.succeed()
@policy.make_pep()
def pep_api_stream_read_pre(ctx, instance_name, rs_comm, stream_read_inp, stream_read_out_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_struct_file_bundle_pre(ctx, instance_name, rs_comm, struct_file_bundle_inp): return policy.succeed()
@policy.make_pep()
def pep_api_struct_file_ext_and_reg_pre(ctx, instance_name, rs_comm, struct_file_ext_and_reg_inp): return policy.succeed()
@policy.make_pep()
def pep_api_struct_file_extract_pre(ctx, instance_name, rs_comm, struct_file_opr_inp): return policy.succeed()
@policy.make_pep()
def pep_api_struct_file_sync_pre(ctx, instance_name, rs_comm, struct_file_opr_inp): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_close_pre(ctx, instance_name, rs_comm, sub_struct_file_close_inp): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_closedir_pre(ctx, instance_name, rs_comm, sub_struct_file_closedir_inp): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_create_pre(ctx, instance_name, rs_comm, sub_file): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_get_pre(ctx, instance_name, rs_comm, sub_file, sub_file_get_out_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_lseek_pre(ctx, instance_name, rs_comm, sub_struct_file_lseek_inp, sub_struct_file_lseek_out): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_mkdir_pre(ctx, instance_name, rs_comm, sub_file): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_open_pre(ctx, instance_name, rs_comm, sub_file): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_opendir_pre(ctx, instance_name, rs_comm, sub_file): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_put_pre(ctx, instance_name, rs_comm, sub_file, sub_file_put_out_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_read_pre(ctx, instance_name, rs_comm, sub_struct_file_read_inp, sub_struct_file_read_out_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_readdir_pre(ctx, instance_name, rs_comm, sub_struct_file_readdir_inp, rods_dirent): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_rename_pre(ctx, instance_name, rs_comm, sub_struct_file_rename_inp): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_rmdir_pre(ctx, instance_name, rs_comm, sub_file): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_stat_pre(ctx, instance_name, rs_comm, sub_file, sub_struct_file_stat_out): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_truncate_pre(ctx, instance_name, rs_comm, sub_file): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_unlink_pre(ctx, instance_name, rs_comm, sub_file): return policy.succeed()
@policy.make_pep()
def pep_api_sub_struct_file_write_pre(ctx, instance_name, rs_comm, sub_struct_file_write_inp, sub_struct_file_write_out_bbuf): return policy.succeed()
@policy.make_pep()
def pep_api_sync_mounted_coll_pre(ctx, instance_name, rs_comm, sync_mounted_coll_inp): return policy.succeed()
@policy.make_pep()
def pep_api_ticket_admin_pre(ctx, instance_name, rs_comm, ticket_admin_inp): return policy.succeed()
@policy.make_pep()
def pep_api_touch_pre(ctx, instance_name, rs_comm, json_input): return policy.succeed()
@policy.make_pep()
def pep_api_unbun_and_reg_phy_bunfile_pre(ctx, instance_name, rs_comm, data_obj_inp): return policy.succeed()
@policy.make_pep()
def pep_api_unreg_data_obj_pre(ctx, instance_name, rs_comm, unreg_data_obj_inp): return policy.succeed()
@policy.make_pep()
def pep_api_user_admin_pre(ctx, instance_name, rs_comm, user_admin_inp): return policy.succeed()
@policy.make_pep()
def pep_api_zone_report_pre(ctx, instance_name, _comm, _bbuf): return policy.succeed()
